// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoRent.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotoRent.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotoRent.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataExclusao");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Atendente", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Atendente", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Entregador", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoriaCNH")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CNH")
                        .IsUnique();

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Entregador", null, t =>
                        {
                            t.HasCheckConstraint("CK_Entregador_CategoriaCNH", "\"CategoriaCNH\" IN ('A', 'AB')");
                        });
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.FotoDocumento", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<string>("CaminhoImagem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("EntregadorId");

                    b.ToTable("FotoDocumento", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.FotoMoto", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<string>("CaminhoImagem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("MotoId");

                    b.ToTable("FotoMoto", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.HabilitarEntregador", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<bool>("Aprovada")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AtendenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasIndex("AtendenteId");

                    b.HasIndex("EntregadorId");

                    b.ToTable("HabilitarEntregador", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Locacao", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("DataFimPrevista")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFimReal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("MotoId");

                    b.ToTable("Locacao", null, t =>
                        {
                            t.HasCheckConstraint("CK_Locacao_Datas", "\"DataFimPrevista\" > \"DataInicio\" AND (\"DataFimReal\" IS NULL OR \"DataFimReal\" >= \"DataInicio\")");
                        });
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Manutencao", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Km")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasIndex("MotoId");

                    b.ToTable("Manutencao", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Marca", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Marca", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Modelo", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasIndex("MarcaId", "Nome")
                        .IsUnique();

                    b.ToTable("Modelo", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Moto", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("integer");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("integer");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<decimal>("CapacidadeTanque")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Chassi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("integer");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DataAquisicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LicenciamentoValidoAte")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("uuid");

                    b.Property<string>("ObservacoesDocumentacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Peso")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ProximaRevisao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Quilometragem")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Renavam")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<bool>("TemSeguro")
                        .HasColumnType("boolean");

                    b.Property<int>("TipoCombustivel")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int>("TipoMotor")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int?>("TipoSeguro")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UltimaRevisao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ValorAquisicao")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("ValorCaucao")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("ValorLocacaoDiaria")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime?>("VencimentoSeguro")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("Chassi")
                        .IsUnique();

                    b.HasIndex("ModeloId");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("Renavam")
                        .IsUnique();

                    b.ToTable("Moto", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Reserva", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("MotoId");

                    b.ToTable("Reserva", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reserva_Datas", "\"DataFim\" > \"DataInicio\"");
                        });
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.User", b =>
                {
                    b.HasBaseType("MotoRent.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AtendenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AtendenteId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntregadorId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AtendenteId")
                        .IsUnique();

                    b.HasIndex("AtendenteId1");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EntregadorId")
                        .IsUnique();

                    b.HasIndex("EntregadorId1");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Atendente", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Atendente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Entregador", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Entregador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.FotoDocumento", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.Entregador", "Entregador")
                        .WithMany("Documentos")
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.FotoDocumento", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.FotoMoto", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.FotoMoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Moto", "Moto")
                        .WithMany("Fotos")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.HabilitarEntregador", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.Atendente", "Atendente")
                        .WithMany()
                        .HasForeignKey("AtendenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.HabilitarEntregador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendente");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Locacao", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.Entregador", "Entregador")
                        .WithMany("Locacoes")
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Locacao", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Moto", "Moto")
                        .WithMany("Locacoes")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entregador");

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Manutencao", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Manutencao", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Moto", "Moto")
                        .WithMany("Manutencoes")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Marca", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Marca", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Modelo", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Modelo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Moto", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Moto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Modelo", "Modelo")
                        .WithMany("Motos")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Reserva", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.Entregador", "Entregador")
                        .WithMany("Reservas")
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.Reserva", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Moto", "Moto")
                        .WithMany("Reservas")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entregador");

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.User", b =>
                {
                    b.HasOne("MotoRent.Domain.Entities.Atendente", null)
                        .WithOne("User")
                        .HasForeignKey("MotoRent.Domain.Entities.User", "AtendenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MotoRent.Domain.Entities.Atendente", "Atendente")
                        .WithMany()
                        .HasForeignKey("AtendenteId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.Entregador", null)
                        .WithOne("User")
                        .HasForeignKey("MotoRent.Domain.Entities.User", "EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MotoRent.Domain.Entities.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoRent.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("MotoRent.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendente");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Atendente", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Entregador", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("Locacoes");

                    b.Navigation("Reservas");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Modelo", b =>
                {
                    b.Navigation("Motos");
                });

            modelBuilder.Entity("MotoRent.Domain.Entities.Moto", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("Locacoes");

                    b.Navigation("Manutencoes");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
